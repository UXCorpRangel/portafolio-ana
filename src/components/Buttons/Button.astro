---
import {
  ButtonSize,
  ButtonVariant,
  HtmlType,
  IconCatalog,
  IconSize,
  IconStyle,
  type ColorVariants
} from '@contracts'
import Icon from '@components/Icon.astro'

interface Props {
  tag?: 'button' | 'anchor'
  href?: string
  target?: HTMLAnchorElement['target']
  id?: string
  size?: ButtonSize
  className?: string
  variant?: ButtonVariant
  invert?: boolean
  isDisabled?: boolean
  isFullWidth?: boolean
  htmlType?: HtmlType
  beforeIcon?: IconCatalog
  afterIcon?: IconCatalog
  // TODO: Look for a better way to pass the color
  iconColor?: `var(--${ColorVariants}-${string})`
}

const {
  tag = 'button',
  href = '',
  target = '_blank',
  size = ButtonSize.base,
  variant = ButtonVariant.primary,
  invert,
  isDisabled,
  isFullWidth = false,
  htmlType,
  className,
  beforeIcon,
  afterIcon,
  iconColor = '',
  id
} = Astro.props

const iconSizeMap = {
  [ButtonSize.xs]: IconSize.lg,
  [ButtonSize.sm]: IconSize.xl,
  [ButtonSize.base]: IconSize['2xl'],
  [ButtonSize.lg]: IconSize['3xl']
}

const computedIconSize = iconSizeMap[size]
---

{
  tag === 'button' ? (
    <button
      id={id}
      type={htmlType}
      disabled={isDisabled}
      data-size={size}
      data-variant={variant}
      class:list={[
        'button',
        { inverted: invert },
        { fullWidth: isFullWidth },
        className
      ]}
    >
      {beforeIcon && (
        <Icon
          icon={beforeIcon}
          size={computedIconSize}
          color={iconColor}
          iconStyle={IconStyle.bold}
        />
      )}

      <slot />

      {afterIcon && (
        <Icon
          icon={afterIcon}
          size={computedIconSize}
          color={iconColor}
          iconStyle={IconStyle.bold}
        />
      )}
    </button>
  ) : (
    <a
      id={id}
      data-size={size}
      data-variant={variant}
      class:list={[
        'button',
        { inverted: invert },
        { fullWidth: isFullWidth },
        className
      ]}
      href={href}
      target={target}
    >
      {beforeIcon && (
        <Icon
          icon={beforeIcon}
          size={computedIconSize}
          color={iconColor}
          iconStyle={IconStyle.bold}
        />
      )}

      <slot />

      {afterIcon && (
        <Icon
          icon={afterIcon}
          size={computedIconSize}
          color={iconColor}
          iconStyle={IconStyle.bold}
        />
      )}
    </a>
  )
}

<style>
  :root {
    --color-ghost: transparent;
    --text-color: hsl(0deg 0% 100%);
    --gradient-primary: var(--color-secondary-500), var(--color-primary-500),
      var(--color-primary-500), var(--color-secondary-500);
    --font-weight: 500;
  }

  /* TODO: Make this a utility Class */
  .fullWidth {
    inline-size: 100%;
  }

  .button {
    position: relative;
    z-index: 1;
    inline-size: 90%;

    padding: var(--padding);
    border: none;
    border-radius: 2.25rem;
    overflow: hidden;
    text-align: center;
    color: var(--text-color);
    font-weight: var(--font-weight);
    font-size: var(--font-size);

    background-color: var(--background-color);

    /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */
    transition: font-weight 500ms linear(0, 0.009, 0.035 2.1%, 0.141 4.4%, 0.723 12.9%, 0.938 16.7%, 1.017, 1.077, 1.121, 1.149 24.3%, 1.159, 1.163, 1.161, 1.154 29.9%, 1.129 32.8%, 1.051 39.6%, 1.017 43.1%, 0.991, 0.977 51%, 0.974 53.8%, 0.975 57.1%, 0.997 69.8%, 1.003 76.9%, 1);
    block-size: var(--height);
  }

  @media (width >= 48rem) {
    .button {
      inline-size: fit-content;
    }
  }

  .button:has(svg) {
    display: flex !important;
    gap: 0.625rem;
    align-items: center;
    justify-content: center;
  }

  .button:active {
    --font-weight: 800;
  }

  .button::before {
    position: absolute;

    z-index: -1;

    background-image: linear-gradient(to right, var(--gradient-primary));

    transition: transform 0.3s cubic-bezier(0.5, 0, 0.5, 1);

    content: '';
    will-change: transform;
    inset: 0;
    inline-size: 200%;
  }

  .button:hover::before {
    transform: translateX(-50%);
  }

  .button.inverted {
    color: hsl(0deg 0% 100%);
    padding-block: 0.9rem;

    background: transparent;
  }

  .button.inverted::before {
    position: absolute;

    padding: 0.125rem;
    border-radius: 3.125rem;

    background-image: linear-gradient(to right, var(--gradient-primary));
    background-size: 200% 200%;

    /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */
    transition: background-position 500ms cubic-bezier(0.5, 0, 0.5, 1);

    content: '';

    inline-size: 100%;
    inset: 0;
    mask:
      linear-gradient(hsl(0deg 0% 100%) 0 0) content-box,
      linear-gradient(hsl(0deg 0% 100%) 0 0);

    mask-composite: exclude;
  }

  .button.inverted:hover::before {
    background-position: 100% center;
    transform: translateX(0%);
  }

  .button[data-variant='primary'] {
    --gradient-primary: var(--color-secondary-500), var(--color-primary-400),
      var(--color-primary-600), var(--color-secondary-600);
    --text-color: #000;
  }

  .button[data-variant='secondary'] {
    --gradient-primary: hsl(228deg 100% 59%), hsl(263deg 100% 66%);
  }

  .button[data-variant='ghost'] {
    --gradient-primary: hsl(0deg 0% 14%), hsl(0deg 0% 12%), hsl(0deg 0% 12%),
      hsl(0deg 0% 14%);
  }

  .button:disabled {
    cursor: not-allowed;
    opacity: 0.4;
  }

  .button:disabled:hover::before {
    background-position: initial;
    transform: translateX(0%);
  }

  .button:disabled:active {
    font-weight: var(--font-weight);
  }

  /* Size styles */
  .button[data-size='xs'] {
    --padding: 0.375rem 1rem;
    --font-size: 12px;
    --height: 2rem;
  }

  .button[data-size='xs']:has(svg) {
    --padding: 0.375rem 0.75rem;
  }

  .button[data-size='sm'] {
    --padding: 0.5rem 1.5rem;
    --font-size: 16px;
    --height: 2.2rem;
  }

  .button[data-size='sm']:has(svg) {
    --padding: 0.5rem 1.275rem;
  }

  .button[data-size='base'] {
    --padding: 1.125rem 2.5rem;
    --font-size: 16px;
  }

  .button[data-size='base']:has(svg) {
    --padding: 0.75rem 2rem;
  }

  .button[data-size='lg'] {
    --padding: 0.75rem 3.75rem;
    --font-size: 1.25rem;
    --height: 3rem;
  }

  .button[data-size='lg']:has(svg) {
    --padding: 0.75rem 3rem;
  }
</style>
